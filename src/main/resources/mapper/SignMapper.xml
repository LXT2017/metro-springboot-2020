<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mt.metro.mapper.SignMapper">
    <resultMap id="BaseResultMap" type="com.mt.metro.entity.Sign">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="one" property="one" jdbcType="INTEGER"/>
        <result column="two" property="two" jdbcType="INTEGER"/>
        <result column="three" property="three" jdbcType="INTEGER"/>
        <result column="four" property="four" jdbcType="INTEGER"/>
        <result column="five" property="five" jdbcType="INTEGER"/>
        <result column="six" property="six" jdbcType="INTEGER"/>
        <result column="seven" property="seven" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, one, two, three, four, five, six, seven
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.mt.metro.entity.SignExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from sign
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from sign
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from sign
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.mt.metro.entity.SignExample">
        delete from sign
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.mt.metro.entity.Sign">
        insert into sign (id, one, two,
        three, four, five,
        six, seven)
        values (#{id,jdbcType=INTEGER}, #{one,jdbcType=INTEGER}, #{two,jdbcType=INTEGER},
        #{three,jdbcType=INTEGER}, #{four,jdbcType=INTEGER}, #{five,jdbcType=INTEGER},
        #{six,jdbcType=INTEGER}, #{seven,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.mt.metro.entity.Sign">
        insert into sign
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="one != null">
                one,
            </if>
            <if test="two != null">
                two,
            </if>
            <if test="three != null">
                three,
            </if>
            <if test="four != null">
                four,
            </if>
            <if test="five != null">
                five,
            </if>
            <if test="six != null">
                six,
            </if>
            <if test="seven != null">
                seven,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="one != null">
                #{one,jdbcType=INTEGER},
            </if>
            <if test="two != null">
                #{two,jdbcType=INTEGER},
            </if>
            <if test="three != null">
                #{three,jdbcType=INTEGER},
            </if>
            <if test="four != null">
                #{four,jdbcType=INTEGER},
            </if>
            <if test="five != null">
                #{five,jdbcType=INTEGER},
            </if>
            <if test="six != null">
                #{six,jdbcType=INTEGER},
            </if>
            <if test="seven != null">
                #{seven,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.mt.metro.entity.SignExample" resultType="java.lang.Integer">
        select count(*) from sign
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update sign
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.one != null">
                one = #{record.one,jdbcType=INTEGER},
            </if>
            <if test="record.two != null">
                two = #{record.two,jdbcType=INTEGER},
            </if>
            <if test="record.three != null">
                three = #{record.three,jdbcType=INTEGER},
            </if>
            <if test="record.four != null">
                four = #{record.four,jdbcType=INTEGER},
            </if>
            <if test="record.five != null">
                five = #{record.five,jdbcType=INTEGER},
            </if>
            <if test="record.six != null">
                six = #{record.six,jdbcType=INTEGER},
            </if>
            <if test="record.seven != null">
                seven = #{record.seven,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update sign
        set id = #{record.id,jdbcType=INTEGER},
        one = #{record.one,jdbcType=INTEGER},
        two = #{record.two,jdbcType=INTEGER},
        three = #{record.three,jdbcType=INTEGER},
        four = #{record.four,jdbcType=INTEGER},
        five = #{record.five,jdbcType=INTEGER},
        six = #{record.six,jdbcType=INTEGER},
        seven = #{record.seven,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.mt.metro.entity.Sign">
        update sign
        <set>
            <if test="one != null">
                one = #{one,jdbcType=INTEGER},
            </if>
            <if test="two != null">
                two = #{two,jdbcType=INTEGER},
            </if>
            <if test="three != null">
                three = #{three,jdbcType=INTEGER},
            </if>
            <if test="four != null">
                four = #{four,jdbcType=INTEGER},
            </if>
            <if test="five != null">
                five = #{five,jdbcType=INTEGER},
            </if>
            <if test="six != null">
                six = #{six,jdbcType=INTEGER},
            </if>
            <if test="seven != null">
                seven = #{seven,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.mt.metro.entity.Sign">
        update sign
        set one = #{one,jdbcType=INTEGER},
        two = #{two,jdbcType=INTEGER},
        three = #{three,jdbcType=INTEGER},
        four = #{four,jdbcType=INTEGER},
        five = #{five,jdbcType=INTEGER},
        six = #{six,jdbcType=INTEGER},
        seven = #{seven,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>